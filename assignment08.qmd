---
title: "Data Science for Public Policy"
subtitle: "Assignment 07"
author: "Talia Stringfellow / Asad Azhar"
execute:
  warning: false
format:
  html:
    embed-resources: true
---

### Packages

```{r}
library (tidyverse)
library(tidymodels)
library(lubridate)
library(themis)
library(yardstick)
library(vip)
library(kknn)
library(patchwork)
library(tidyclust)
library(purrr)
```

# Exercise 1

## Part a

```{r}
votes_103 <- read_csv("votes_time_series.csv") %>%
  mutate_all(~ifelse(is.na(.), 0, .)) %>%
  filter(session == 103)

```

## Part b

```{r}

#Creating the recipe
votes_pca_rec <- votes_103 %>%
  recipe() %>%
  step_pca(starts_with("v"), num_comp = 5) %>%
  prep()


```

## Part c

```{r}

#Analysing PCs
tidy(votes_pca_rec, number = 1, type = "variance") %>%
  filter(terms == "cumulative percent variance") %>%
  slice_min(value, n = 5)

#The first PC explains around 39% of the variance while all of 5 of them cumulatively explain 68% of the variance.
```

## Part d

```{r}

# Analysing PCs
votes_pcs <- votes_pca_rec %>%
  bake(new_data = votes_103)

# Loading and cleaning states data
states <- read_csv("states_regions.csv") %>%
  janitor::clean_names() %>%
  rename(state_name = state, state= state_code)

# Appending states data with votes PC data
votes_pcs <- left_join(votes_pcs, states, by = "state")

# Scatterplot with color mapped to party
plot_party <- ggplot(data = votes_pcs, aes(x = PC1, y = PC2, color = party)) +
  geom_point() +
  labs(title = "Scatterplot of PC1 and PC2 (Color by Party)",
       x = "PC1", y = "PC2")

# Scatterplot with color mapped to region
plot_region <- ggplot(data = votes_pcs, aes(x = PC1, y = PC2, color = region)) +
  geom_point() +
  labs(title = "Scatterplot of PC1 and PC2 (Color by Region)",
       x = "PC1", y = "PC2")

# Arrange plots side by side
combined_plots <- plot_party + plot_region

combined_plots

```


# Exercise 2

## Part a

```{r}
# Set seed for reproducibility
set.seed(20220412)

kmeans_rec <- recipe(formula = ~ .,data = votes_103) %>%
  step_select(all_numeric())

votes_cv <- vfold_cv(votes_103, v = 5)

kmeans_spec <- k_means(
  num_clusters = tune()) %>%
set_engine("stats", nstart = 100)

kmeans_wflow <- workflow(
  preprocessor = kmeans_rec,
  spec = kmeans_spec)

clust_num_grid <- grid_regular(num_clusters(),levels = 10)

res <- tune_cluster(kmeans_wflow,
                    resamples = votes_cv,
                    grid = clust_num_grid,
                    control = control_grid(save_pred = TRUE, extract = identity),
                    metrics = cluster_metric_set(sse_within_total, silhouette_avg))


res_metrics <- res %>%
  collect_metrics()

```


## Part b

```{r}



graph_pca_cluster <- function(df, clust) {
  
  # Creating the recipe for PCA
  rec_pca <- recipe(formula = ~ .,data = df) %>%
  step_pca(all_numeric(), id = "pca")
  
  # Creating recipe for kmeans
  kmeans_rec <- recipe(formula = ~ .,data = df) %>%
  step_select(all_numeric())
  
  #Completing PCA
  votes_pca <- rec_pca %>%
    prep() %>%
    bake(new_data = df)
  
  # Creating spec for clusters
  kmeans_spec <- k_means(num_clusters = clust) %>%
    set_engine("stats",nstart = 100)
  
  #Creating workflow
  kmeans_wflow <- workflow(
    preprocessor = kmeans_rec,
    spec = kmeans_spec)
  
  #Fitting data
  kmeans<- kmeans_wflow %>%
    fit(data = df)
  
  #Graphing PCA1 and PCA2 with color coded by cluster assigned.
  graph <- bind_cols(
    select(votes_pca, PC1, PC2),
    cluster = votes_kmeans %>%
      extract_cluster_assignment() %>%
      pull(.cluster)
)
  ggplot(graph, aes(x = PC1, y = PC2, color = factor(cluster))) +
    geom_point() +
    labs(title = "Scatterplot of PC1 vs PC2 with Cluster Assignment",
         x = "PC1", y = "PC2", color = "Cluster") +
    theme_minimal()
}

graph_pca_cluster(df = votes_103, clust = 2)

```
